import java.util.Stack;
import java.util.Queue;
import java.util.LinkedList;

class HelloWorld {
    public static void main(String[] args) {


    int[] array = {8 , 2 , 5 , 3 , 4 , 7 , 6 , 1};
    
    mergeSort(array);
    
    
    for (int i = 0; i < array.length; i++){
        
        System.out.print(array[i] + " ");
        
    }


        }
        
    private static void mergeSort(int[] array){
        
        int length = array.length; //setting the length of the array to an int type called length.
        if(length <= 1) return; //base case for recursion. if there are 1 or no elements return.
        
        
        //Dividing the array ----->
        
        int middle = length/2;
        int[] leftArray = new int[middle];
        int[] rightArray = new int[length - middle];
        
        //now copy elements of original array into right and left array -->>
        
        int i = 0; // for left array
        int j = 0; // for right array
        
        for(; i < length; i++){
            
            if(i < middle){
                
                leftArray[i] = array[i];
                
            }else{
                
                rightArray[j] = array[i];
                j++;
            }
        }
        mergeSort(leftArray);
        mergeSort(rightArray);
        merge(leftArray , rightArray , array);
    }  

    private static void merge(int[] leftArray , int[] rightArray, int[] array){
        
        //caching the size of both left and right array into local variables -->
        
        int leftSize = array.length/2;
        int rightSize = array.length - leftSize;
        int i = 0 , l = 0 , r = 0;
        
        //check conditions for merging
        
        
        while(l < leftSize && r < rightSize){
            
            if(leftArray[l] < rightArray[r]){
                array[i] = leftArray[l];
                i++;
                l++;
                
            }else{
                
                array[i] = rightArray[r];
                i++;
                r++;
            }
        

        }
        while(l < leftSize){
            array[i] = leftArray[l];
            i++;
            l++;
            
        }
        while(r > rightSize){
            
            array[i] = rightArray[r];
            i++;
            r++;
        }
    }        
    }